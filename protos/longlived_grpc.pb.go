// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LonglivedClient is the client API for Longlived service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LonglivedClient interface {
	Subscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (Longlived_SubscribeClient, error)
}

type longlivedClient struct {
	cc grpc.ClientConnInterface
}

func NewLonglivedClient(cc grpc.ClientConnInterface) LonglivedClient {
	return &longlivedClient{cc}
}

func (c *longlivedClient) Subscribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (Longlived_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Longlived_ServiceDesc.Streams[0], "/protos.Longlived/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &longlivedSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Longlived_SubscribeClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type longlivedSubscribeClient struct {
	grpc.ClientStream
}

func (x *longlivedSubscribeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LonglivedServer is the server API for Longlived service.
// All implementations must embed UnimplementedLonglivedServer
// for forward compatibility
type LonglivedServer interface {
	Subscribe(*Request, Longlived_SubscribeServer) error
	mustEmbedUnimplementedLonglivedServer()
}

// UnimplementedLonglivedServer must be embedded to have forward compatible implementations.
type UnimplementedLonglivedServer struct {
}

func (UnimplementedLonglivedServer) Subscribe(*Request, Longlived_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedLonglivedServer) mustEmbedUnimplementedLonglivedServer() {}

// UnsafeLonglivedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LonglivedServer will
// result in compilation errors.
type UnsafeLonglivedServer interface {
	mustEmbedUnimplementedLonglivedServer()
}

func RegisterLonglivedServer(s grpc.ServiceRegistrar, srv LonglivedServer) {
	s.RegisterService(&Longlived_ServiceDesc, srv)
}

func _Longlived_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LonglivedServer).Subscribe(m, &longlivedSubscribeServer{stream})
}

type Longlived_SubscribeServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type longlivedSubscribeServer struct {
	grpc.ServerStream
}

func (x *longlivedSubscribeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// Longlived_ServiceDesc is the grpc.ServiceDesc for Longlived service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Longlived_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Longlived",
	HandlerType: (*LonglivedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Longlived_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "longlived.proto",
}
